//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/DeveloperConsole/Input/DeveloperConsoleInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @DeveloperConsoleInput: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @DeveloperConsoleInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""DeveloperConsoleInput"",
    ""maps"": [
        {
            ""name"": ""Developer Console"",
            ""id"": ""ef1bdfcb-eb47-4699-8cd4-4488d7f694a7"",
            ""actions"": [
                {
                    ""name"": ""Toggle"",
                    ""type"": ""Button"",
                    ""id"": ""7a582892-3360-4f95-8275-80e04d46edc2"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Exit"",
                    ""type"": ""Button"",
                    ""id"": ""e9510e64-06df-43e1-88c9-17258c0cab84"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""71bf5254-5910-468b-aa62-93b4db2a14fa"",
                    ""path"": ""<Keyboard>/slash"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Toggle"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d3c89f4e-8057-4126-bcc1-4497c12963ff"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": ""Press"",
                    ""processors"": """",
                    ""groups"": ""Keyboard and Mouse"",
                    ""action"": ""Exit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard and Mouse"",
            ""bindingGroup"": ""Keyboard and Mouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Developer Console
        m_DeveloperConsole = asset.FindActionMap("Developer Console", throwIfNotFound: true);
        m_DeveloperConsole_Toggle = m_DeveloperConsole.FindAction("Toggle", throwIfNotFound: true);
        m_DeveloperConsole_Exit = m_DeveloperConsole.FindAction("Exit", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Developer Console
    private readonly InputActionMap m_DeveloperConsole;
    private List<IDeveloperConsoleActions> m_DeveloperConsoleActionsCallbackInterfaces = new List<IDeveloperConsoleActions>();
    private readonly InputAction m_DeveloperConsole_Toggle;
    private readonly InputAction m_DeveloperConsole_Exit;
    public struct DeveloperConsoleActions
    {
        private @DeveloperConsoleInput m_Wrapper;
        public DeveloperConsoleActions(@DeveloperConsoleInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Toggle => m_Wrapper.m_DeveloperConsole_Toggle;
        public InputAction @Exit => m_Wrapper.m_DeveloperConsole_Exit;
        public InputActionMap Get() { return m_Wrapper.m_DeveloperConsole; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DeveloperConsoleActions set) { return set.Get(); }
        public void AddCallbacks(IDeveloperConsoleActions instance)
        {
            if (instance == null || m_Wrapper.m_DeveloperConsoleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DeveloperConsoleActionsCallbackInterfaces.Add(instance);
            @Toggle.started += instance.OnToggle;
            @Toggle.performed += instance.OnToggle;
            @Toggle.canceled += instance.OnToggle;
            @Exit.started += instance.OnExit;
            @Exit.performed += instance.OnExit;
            @Exit.canceled += instance.OnExit;
        }

        private void UnregisterCallbacks(IDeveloperConsoleActions instance)
        {
            @Toggle.started -= instance.OnToggle;
            @Toggle.performed -= instance.OnToggle;
            @Toggle.canceled -= instance.OnToggle;
            @Exit.started -= instance.OnExit;
            @Exit.performed -= instance.OnExit;
            @Exit.canceled -= instance.OnExit;
        }

        public void RemoveCallbacks(IDeveloperConsoleActions instance)
        {
            if (m_Wrapper.m_DeveloperConsoleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDeveloperConsoleActions instance)
        {
            foreach (var item in m_Wrapper.m_DeveloperConsoleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DeveloperConsoleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DeveloperConsoleActions @DeveloperConsole => new DeveloperConsoleActions(this);
    private int m_KeyboardandMouseSchemeIndex = -1;
    public InputControlScheme KeyboardandMouseScheme
    {
        get
        {
            if (m_KeyboardandMouseSchemeIndex == -1) m_KeyboardandMouseSchemeIndex = asset.FindControlSchemeIndex("Keyboard and Mouse");
            return asset.controlSchemes[m_KeyboardandMouseSchemeIndex];
        }
    }
    public interface IDeveloperConsoleActions
    {
        void OnToggle(InputAction.CallbackContext context);
        void OnExit(InputAction.CallbackContext context);
    }
}
